import "hashes/sha256/1536bit.code" as sha256of1536
import "hashes/sha256/1024bit.code" as sha256of1024
import "hashes/sha256/512bit.code" as sha256of512
import "utils/pack/unpack128.code" as unpack128
import "utils/pack/nonStrictUnpack256.code" as unpack256
import "../utils/sha256/padding/shaPad432To512.zok" as shaPad432To512
import "../utils/sha256/padding/shaPad256To512.zok" as shaPad256To512
import "../utils/sha256/padding/shaPad512To1024.zok" as shaPad512To1024
import "../utils/sha256/padding/shaPad1024To1536.zok" as shaPad1024To1536


def concatenate256x256x256x256(field[256] a, field[256] b, field[256] c, field[256] d)->(field[1024]):
	return [...a, ...b, ...c, ...d]

def concatenate256x256x256(field[256] a, field[256] b, field[256] c)->(field[768]):
	return [...a, ...b, ...c]

def concatenate256x256(field[256] a, field[256] b)->(field[512]):
	return [...a, ...b]

def orderedConcatenate216x216(field order, field[216] pathNode, field[216] siblingNode)->(field[432]):
	field[216] left = if order==0 then pathNode else siblingNode fi
	field[216] right = if order==0 then siblingNode else pathNode fi
	return [...left, ...right]

// unpacks a siblingPath's node to bits, ready for sha-ing:
def unpackSiblingNode(field siblingNode)->(field[216]):
	field[256] siblingNodeBits = unpack256(siblingNode)
	return siblingNodeBits[40..256]


// Inputs for main are:

// payTo - the public Ethereum address to which the burned tokens get paid
// asset - the tokenId of the ERC-721 token
// secretKey - the secret key of the spender
// salt - the salt for the commitment being spent
// siblingPath - the sibling-path from the commitment (being spent) to the root of the merkle tree
// nullifier - the nullifier for the commitment being spent
// root - the merkle root

// publicInputHash = hash(root, nullifier, asset, payTo)

// Note - we now use 216 bits for the Merkle tree calculation. This is because 432 is the biggest input we can use for sha256 if we want 432/2 to end on a byte boundary for easier Solidity computation without needing to do full rounds and we need to concatenate the two child hashes. We consider 216 bits to be sufficiently secure. The nullifier, commitment and root retain 256-bit security.

// Each field element passed to main() can be at most 128bits, to make use of unpack128() so most variables occupy two fields (except the publicInputHash, which we maximize as 248-bits)

def main(field publicInputHash, private field contractAddress, private field payToHigh, private field payToLow, private field assetHigh, private field assetLow, private field  secretKeyHigh, private field secretKeyLow, private field saltHigh, private field  saltLow, private field[32] siblingPath, private field order, private field nullifierHigh, private field nullifierLow, private field rootHigh, private field rootLow)->():

	//Unpack the inputs of main() to 128 bits. We'll unpack each field to its own 128 bit string for simplicity for now. Later efficiencies could be made by grouping some inputs.

	field[256] publicInputHashBits = unpack256(publicInputHash)

	field[256] contractAddressBits = unpack256(contractAddress)

	field[128] payToHighBits = unpack128(payToHigh)
	field[128] payToLowBits = unpack128(payToLow)
	field[256] payToBits = [...payToHighBits, ...payToLowBits]

	field[128] assetHighBits = unpack128(assetHigh) //this may seem long-winded but ZoKrates needs intermediate variables for now
	field[128] assetLowBits = unpack128(assetLow)
	field[256] assetBits = [...assetHighBits, ...assetLowBits]

	field[128] secretKeyHighBits = unpack128(secretKeyHigh)
	field[128] secretKeyLowBits = unpack128(secretKeyLow)
	field[256] secretKeyBits = [...secretKeyHighBits, ...secretKeyLowBits]

	field[128] saltHighBits = unpack128(saltHigh)
	field[128] saltLowBits = unpack128(saltLow)
	field[256] saltBits = [...saltHighBits, ...saltLowBits]

	field[128] nullifierHighBits = unpack128(nullifierHigh)
	field[128] nullifierLowBits = unpack128(nullifierLow)
	field[256] nullifierBits = [...nullifierHighBits, ...nullifierLowBits]

	field[128] rootHighBits = unpack128(rootHigh)
	field[128] rootLowBits = unpack128(rootLow)
	field[256] rootBits = [...rootHighBits, ...rootLowBits]

	field[128] orderBits = unpack128(order)


	// First we construct a proof that the nullifier is correct.
	// Concatenate salt|secretKey.

	field[512] preimage512 = concatenate256x256(saltBits, secretKeyBits)
	field[1024] nullifierPadded = shaPad512To1024(preimage512)
	field[256] nullifierBitsCheck = sha256of1024(nullifierPadded[0..256], nullifierPadded[256..512], nullifierPadded[512..768], nullifierPadded[768..1024])



	// Prove that the commitment is in the Merkle tree

	// First, calculate Alice's public key from her private key: publicKey = H(secretKey).

	field[512] secretKeyPadded = shaPad256To512(secretKeyBits)
	field[256] publicKeyBits = sha256of512(secretKeyPadded[0..256], secretKeyPadded[256..512])


	// Next calculate the commitment = H(contractAddress|asset|publicKey|salt)

	field[1024] commitmentPreImage = concatenate256x256x256x256(contractAddressBits, assetBits, publicKeyBits, saltBits)
	field[1536] commitmentPadded = shaPad1024To1536(commitmentPreImage)

	field[256] hash = sha256of1536(commitmentPadded[0..256], commitmentPadded[256..512], commitmentPadded[512..768], commitmentPadded[768..1024], commitmentPadded[1024..1280], commitmentPadded[1280..1536]) // commitment

	// concatenate siblings and hash all the way up to the root:
	for field i in 0..32 do
		field j = 31-i
		field k = 127-i
		preimage512 = shaPad432To512(orderedConcatenate216x216(orderBits[k], hash[40..256], unpackSiblingNode(siblingPath[j])))
		hash = sha256of512(preimage512[0..256], preimage512[256..512])
  endfor
	// save the computed root:
	field[256] rootBitsCheck = hash

	// Now test the proofs

	nullifierBits == nullifierBitsCheck
	rootBits == rootBitsCheck


	// Check that the 'public inputs' hash to the publicInputHash:
	// (This also intertwines the 'payTo' input into the proof)

	field[1024] preimage1024 = concatenate256x256x256x256(rootBits, nullifierBits, assetBits, payToBits)

	field[1536] publicInputPadded = shaPad1024To1536(preimage1024)
	field[256] publicInputHashBitsCheck = sha256of1536(publicInputPadded[0..256], publicInputPadded[256..512], publicInputPadded[512..768], publicInputPadded[768..1024], publicInputPadded[1024..1280], publicInputPadded[1280..1536])

	publicInputHashBits[8..256] == publicInputHashBitsCheck[8..256]


	return
